-*- org -*-

* [1/9] Server
** DONE Listen to multiple incoming connections (without threading)
   CLOSED: [2023-12-31 Sun 15:49]
   This is done using IO::Select, and the code was adapted from final example
   code on the IO::Select manpage.
** TODO Use Perl -T (taint flag) for the server
   (Manpage perlipc says this is a good idea.)
** TODO Change dir to '/'
** TODO Setsid
** TODO Close all standard streams, only talk on socket
** TODO Keep track of client-specific data
   E.g. login info, maybe more later.
** TODO Keep track of open connections, die when last has exited(?)
   But don't die before first client has connected.
** TODO On startup make already existing tempdir is chmod 0700
   Function: create_tempdir() -- Easiest is maybe to just 'chmod 0700' the
   directory if it exists on startup?
** TODO Accept standard signals for reload/restart (SIGHUP, SIGINT etc.)
   From: https://docstore.mik.ua/orelly/perl/cookbook/ch16_01.htm

   SIGINT: is normally triggered by Ctrl-C. This requests that a process
     interrupt what it's doing. Simple programs like filters usually just die,
     but more important ones like shells, editors, or FTP programs usually use
     SIGINT to stop long-running operations so you can tell them to do something
     else.

   SIGQUIT: is also normally generated by a terminal, usually Ctrl-\. Its
     default behavior is to generate a core dump.

   SIGTERM: is sent by the kill shell command when no signal name is explicitly
     given. Think of it as a polite request for a process to die. SIGUSR1 and

   SIGUSR2: are never caused by system events, so user applications can safely
     use them for their own purposes.

   SIGPIPE: is sent by the kernel when your process tries to write to a pipe or
     socket when the process on the other end has closed its connection, usually
     because it no longer exists.

   SIGALRM: is sent when the timer set by the alarm function expires, as
     described in Recipe 16.21.

   SIGHUP: is sent to a process when its controlling terminal gets a hang-up
     (e.g., the modem lost its carrier), but it also often indicates that a
     program should restart or reread its configuration.

   SIGCHLD: is probably the most important signal when it comes to low-level
     systems programming. The system sends your process a SIGCHLD when one of
     its child processes stops running - or, more likely, when that child exits.
     See Recipe 16.19 for more on SIGCHLD.
* [1/1] Client
** DONE Read from both STDIN and server at same time
   CLOSED: [2023-12-31 Sun 15:49]
   This is done using IO::Select.
* [eof]
