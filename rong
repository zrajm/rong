#!/usr/bin/env perl
# Copyright (C) 2023-2024 zrajm <rong@zrajm.org>
# License: GPLv2 [https://gnu.org/licenses/gpl-2.0.txt]

# NOTE ON UTF8: The `use open` only deals with SOME input streams. Encoding and
# decoding has to be done manually for: Client's STDIN in REPL mode + all
# sockets + command line args + paths gotten from the file system + environment
# variables (%ENV) + Perl constants (e.g. `__FILE__`). STDIN, STDERR

# https://perl.com/pub/2012/04/perlunicook-standard-preamble.html
use utf8;      # so literals and identifiers can be in UTF-8
use v5.12;     # or later to get "unicode_strings" feature
use strict;    # quote strings, declare variables
use warnings;  # on by default
use warnings  qw(FATAL utf8);    # fatalize encoding glitches
use open      qw(:std :utf8);    # undeclared streams in UTF-8
use charnames qw(:full :short);  # unneeded in v5.16

use IO::Socket;
use IO::Select;
use POSIX;
use File::Spec;
use Encode ();

our $AUTHOR='zrajm <rong@zrajm.org>';
our $VERSION='0.1.3';                          # https://semver.org/
our $VERSION_DATE='14 February 2024';
our $CREATED_DATE='28 December 2023'; # never change this!
our $USAGE = <<'USAGE_END';
Usage: rong [OPTION]... [COMMAND [ARG]...|FILE...]
A daemonic headless text editor.

Options:
  -h, --help      Display this help, or COMMAND help, and exit
  -V, --version   Output version information and exit

Commands:
  %%COMMANDS%%

If neither COMMAND nor FILE(s) are given, `list` is assumed. If FILE(s) are
specified but COMMAND is not, then `load` is assumed.
USAGE_END
our $PROGRAM = (File::Spec->splitpath(decode(__FILE__)))[2];

###############################################################################
# Functions

sub send_command(\$$$;%);                      # declare prototype early

# FIXME: display help, even if we cannot talk to server
# (but show that some info is missing)
sub help {
    my ($server, @cmd) = @_;
    send_command(my $text, $server, rong::serialize('help', @cmd))
        or die $@;
    print @cmd ? $text : do {
        $USAGE =~ s{(\h*)(\Q%%COMMANDS%%\E)}{  # insert list of commands
            my $spc = $1;
            chomp($text);
            $text =~ s#^#$spc#gm;              # indent
            $text;
        }e;
        $USAGE;
    };
    exit 0;
}
sub version {
    my ($years)    = $CREATED_DATE =~ m#(\d{4})#;
    my ($end_year) = $VERSION_DATE =~ m#(\d{4})#;
    $years .= "-$end_year" unless $years eq $end_year;
    print(
        "$PROGRAM (zrajm utils) $VERSION ($VERSION_DATE)\n",
        "Copyright (C) $years $AUTHOR\n",
        "License: GNU GPLv2 <https://gnu.org/licenses/gpl-2.0.txt>.\n",
        "This is free software: You are free to change and redistribute it.\n");
    exit 0;
}

# Usage: create_tempdir()
#
# Creates a run directory for the Rong server and clients. The directory is
# called '<TEMPDIR>/<PROGRAMNAME>-<USERID>' (usually '/tmp/rong-1000' but all
# parts can change depending on your $TEMPDIR variable, the name of the script
# and your user's numerical user id). The directory name is the same as Tmux.
sub create_tempdir {
    my $dir = File::Spec->join(rong::tempdir(), "$PROGRAM-$<");
    mkdir($dir, 0700) or die "Cannot create tempdir '$dir': $!\n"
        unless -d $dir;
    return $dir;
}

{
    state sub OPT() { Encode::FB_CROAK | Encode::LEAVE_SRC }
    sub encode { eval { Encode::encode('UTF-8', shift // $_, OPT) } }
    sub decode { eval { Encode::decode('UTF-8', shift // $_, OPT) } }
}

# Returns a decoded, chomped and cleaned up string, or `undef` on error or
# end-of-file. If there was an error then `$@` is set to an error message. On
# end-of-input if both return value and `$@` are set to `undef`. (On success
# `$@` is set to `undef`.)
#
# Input is read from $fh, in either either single, or multi-line format. A
# multi-line input is indicated by the first line starting with one or two
# period(s), and ends in a line containing only a single period. (Furthermore,
# in multi-line content, all lines in which the data itself begin with a
# period, an extra period is expected to escape the in-data period).
#
# Named options may be provided after the second argument. Currently two
# arguments are supported.
#
# * `raw => 1`-- Suppress cleanup of multi-line server response, and return the
#   response gotten from the server as-is. (Normally lines in the response
#   which have leading period(s) are stripped of one period, and the
#   `<LF>.<LF>` sequence that terminates the response is removed.) Note that
#   leading `OK`/`ERR` and the one or two periods which may precede that is
#   always returned. In 'raw' mode `$@` is only set if there's a connection
#   error with the socket, any `ERR` responses from the server are treated the
#   same as `OK` responses.
#
# * `server => $fh` -- Used to identify a file handle used for the server
#   connection (if any). This (only) affects error messages. If the given file
#   handle is the same as the one input is read from and an error occur the
#   resulting error message will say that there was an error in reading from
#   the server. (In all other cases, the error message will say that there was
#   an error in communicating with a client.)
#
sub input {
    my ($fh, %opt) = @_;
    my $src = $fh ne ($opt{server} // '') ? 'client' : 'server';
    return eval {
        my $size = sysread($fh, local $_, 1024 * 1024)
            // die("Cannot read from $src: $!\n");
        return () if $size == 0;
        if (m#^[.]#) {
            until (/^[.]\n\z/m) {              # until final ".\n" is found
                sysread($fh, my $raw, 1024 * 1024)
                    // die("Cannot read from $src: $!\n");
                $_ .= $raw;
            }
            if (!$opt{raw}) {
                s#^[.]\n\z##m;                 # strip final ".\n"
                s#(?<=\n)[.]##gm;              # strip one line-leading '.'
            }
        }
        chomp($_);
        decode($_) // die("Cannot decode string from $src: $@");
    };
}
# Used for writing to socket.
#
# $status is `OK` or `ERR` optionally prefixed by `.` (for multi-line) or `..`
# (for multi-line with appended newline).
sub output {
    my $status = shift(@_);
    my $fh = select();
    state sub sockwrite {
        my ($fh, $str) = @_;
        syswrite($fh, encode($str))
            // die "Cannot write to socket: $!\n";
    }
    if ($status !~ /^[.]/) {
        sockwrite($fh, join(' ', $status, @_) . "\n");
    } else {
        my $eol = $status =~ /^[.][.]/ ? '' : "\n";
        sockwrite($fh, "$status\n");
        sockwrite($fh, (/^[.]/ && '.') . "$_$eol") for @_;
        sockwrite($fh, (!$eol && "\n") . ".\n");
    }
}

sub make_socket {
    my %opt = @_;
    if (my $file = $opt{Local} and -e $opt{Local}) { # remove old file (if any)
        die "Cannot delete non-socket file '$file'\n" unless -S $file;
        unlink $file or die "Cannot delete previous socket '$file': $!\n";
    }
    my $fh = IO::Socket::UNIX->new(%opt, Type => SOCK_STREAM)
        or return ();
    $fh->autoflush(1);
    return $fh;
}

sub make_accept {
    my ($fh) = @_;
    my $newfh = $fh->accept();
    $newfh->autoflush(1);
    return $newfh;
}

sub start_server {
    my ($socket_path, $logfile) = @_;

    # If server is already running, return connection to that.
    if (my $fh = make_socket(Peer => $socket_path)) { return $fh }

    # Create server's listening socket to which new clients connect (it's
    # inherited by child processes). Done BEFORE forking avoid race condition
    # where child tries to connect and listening socket isn't yet there.
    my $listenfh = make_socket(Local => $socket_path, Listen => 1)
        or die("Cannot create socket '$socket_path': $IO::Socket::errstr\n");

    # Start intermediate process (session leader in new session).
    defined(my $inter_pid = fork) or die "Cannot fork intermediate: $!\n";
    if ($inter_pid == 0) {                     # in intermediate
        (POSIX::setsid != -1) or die "Cannot start new session: $!";
        # Start server process.
        defined(my $server_pid = fork) or die "Cannot fork server: $!\n";
        if ($server_pid == 0) {                # in server
            $0 .= ' --daemon';                 #   server process name
            my $root = rong::rootdir();
            umask(0) or die "Cannot change umask to '0': $!\n";
            chdir($root) or die "Cannot change dir to '$root': $!\n";
            close STDOUT;
            open(STDERR, '>>', $logfile)
                or die "Cannot open logfile '$logfile': $!\n";
            close STDIN;
            server_main($listenfh, $socket_path);# never returns
            exit 0;
        }
        exit 0;
    }

    # Client process (original process).
    close $listenfh;                           # close listening socket
    wait;                                      # reap intermediate process
    return make_socket(Peer => $socket_path);  # connect to new server
}

{
    package rong;
    use Cwd ();

    # Wrappers to decode names from the file system.
    sub rootdir  { main::decode File::Spec->rootdir() }
    sub tempdir  { main::decode File::Spec->tmpdir() }
    sub workdir  { main::decode Cwd::getcwd() }
    sub realpath { main::decode Cwd::realpath(@_) }

    ###########################################################################

    sub max {
        my $max = shift;
        $max = $_ > $max ? $_ : $max for @_;
        return $max;
    }

    ###########################################################################
    ## Internal functions, called inside eval, use die() to indicate error

    sub load_file {
        my ($file) = @_;
        die "Cannot load a directory\n" if -d $file;
        die "Cannot load a block device\n" if -b _;
        die "Cannot load a character device\n" if -c _;
        die "Cannot load a named pipe\n" if -p _;
        die "Cannot load a socket\n" if -S _;
        open(my $fh, '<', $file) or die "Cannot open file: $!\n";
        my @buf;
        until (eof $fh) {
            my $x = <$fh> // die "Cannot read file: $!\n";
            push(@buf, $x);
        }
        close($fh) or die "Cannot close file: $!\n";
        return \@buf;
    }

    sub save_file {
        my ($file, $data) = @_;
        open(my $fh, '>', $file) or die "Cannot open file: $!\n";
        print($fh @$data) or die "Cannot write file: $!\n";
        close($fh) or die "Cannot close file: $!\n";
    }

    # Using `decode()` isn't needed for `abspath()` and `relpath()`,
    # since if both args are in utf8, then the result is, too.
    sub abspath {
        my ($path, $base) = @_;
        $path =~ s#^~[^][}{?* /]*# (glob "'$&'")[0] #e; # expand `~[user]`
        $path = File::Spec->join($base, $path)
            unless File::Spec->file_name_is_absolute($path);
        $path = realpath($path) or die "Cannot find absolute path: $!\n";
        return $path;
    }

    sub relpath {
        my ($path, $base) = @_;
        return $base eq rootdir()
            ? $path : File::Spec->abs2rel($path, $base);
    }

    # Here say() & print() goes to client; warn() goes to log; die() exits with
    # error message. All cmd_*() functions return a documenting string if
    # called without args.
    my %buf;
    my %opt; # $opt{$id}{$property} where '$id' is a client connection id.

    sub cmd_cat {
        my ($id, $file) = @_ or return <<~DOC;
            cat FILE...

            Output FILE(s) on standard output.
            DOC
        die "No file specified.\n" unless $file;
        $file = abspath($file, $opt{$id}{pwd});
        die "No such file loaded\n" if not exists $buf{$file};
        main::output('..OK', @{$buf{$file}});
    }

    sub cmd_cd {
        my ($id, $dir) = @_ or return <<~DOC;
            cd DIR

            Change directory used for relative filenames.
            DOC
        if (defined $dir) {
            my $newdir = abspath($dir, $opt{$id}{pwd});
            die "Directory does not exist\n" unless -e $newdir;
            die "File is not a directory\n" unless -d $newdir;
            $opt{$id}{pwd} = $newdir;
        }
        main::output('OK', $opt{$id}{pwd});
    }

    sub cmd_help {
        my ($id, $cmd) = @_ or return <<~DOC;
            help [COMMAND|-]

            List commands, or show help for COMMAND.
            DOC
        die "Too many arguments.\n" if @_ > 2;
        my $text;
        if ($cmd eq '-') {
            $text = join ' ', sort map { /^cmd_(.*)/ ? $1 : () } keys %rong::;
        } elsif ($cmd) {
            die "No help found for command '$cmd'\n"
                unless $rong::{"cmd_$cmd"};
            $text = join "\n", $rong::{"cmd_$cmd"}();
            chomp($text);
        } else {
            my @list = map {
                $rong::{$_}() =~ m#(.*)\n+([^.\n]*)#
                    ? [$1, $2] : [/^cmd_(\w+)/, '!!! -- UNDOCUMENTED'];
            } sort grep /^cmd_/, keys(%rong::);
            my $maxlen = max(map { length($_->[0]) } @list);
            $text = join("\n", map {
                sprintf "%-${maxlen}s  %s", @$_;
            } @list);
        }
        main::output('.OK', $text);
    }

    sub cmd_kill {
        my ($id, $file) = @_ or return <<~DOC;
            kill FILE...

            Unload FILE(s).
            DOC
        die "No file specified.\n" unless $file;
        $file = abspath($file, $opt{$id}{pwd});
        die "No such file loaded\n" if not exists $buf{$file};
        delete $buf{$file};
        main::output('OK');
    }

    sub cmd_list {
        my ($id, @arg) = @_ or return <<~DOC;
            [list]

            List loaded files (default if no FILE given).
            DOC
        die "Too many arguments.\n" if @arg;
        main::output('.OK', map {
            escape(relpath($_, $opt{$id}{pwd}));
        } sort keys %buf);
    }

    sub cmd_load {
        my ($id, $file) = @_ or return <<~DOC;
            [load] FILE...

            Load FILE(s) (default if FILE(s) are given).
            DOC
        die "No file specified.\n" unless $file;
        $file = abspath($file, $opt{$id}{pwd});
        die "File already loaded\n" if exists $buf{$file};
        $buf{$file} = load_file($file);
        main::output('OK');
    }

    sub cmd_save {
        my ($id, $file) = @_ or return <<~DOC;
            save FILE...

            Save FILE(s).
            DOC
        die "No file specified.\n" unless $file;
        $file = abspath($file, $opt{$id}{pwd});
        die "No such file loaded\n" if not exists $buf{$file};
        save_file($file, $buf{$file});
        main::output('OK');
    }

    # Note: escape() & serialize() are used externally (and must therefore not
    # die()), while unescape() and deserialize() are not (and may die()).
    sub deserialize {
        local ($_) = @_;
        my @x = m/\G( "(?:[^"\\]|\\.)*" |      # double quoted
                      '(?:[^'\\]|\\.)*' |      # single quoted
                      [^[:cntrl:][:space:]"']+ # other words
                  )(?:\h+|\n?\z)/gxc;
        die "Cannot deserialize string\n"
            unless defined(pos) and pos == length;
        return map { unescape($_) } @x;
    }
    sub unescape {
        local ($_) = @_;
        /^(["'])(.*)\1$/ and $_ = $2;
        s#\\([abefnrt\\\"']|x[0-9A-F]{2})# eval "\"$&\"" #ge;
        return $_;
    }

    ###########################################################################
    ## Called externally, must not die()

    sub serialize { join ' ', map { escape($_) } @_ }
    sub escape {
        local ($_) = @_;
        my %c = ("\a"=>'\a', "\b"=>'\b', "\e"=>'\e',  "\f"=>'\f', "\n"=>'\n',
                 "\r"=>'\r', "\t"=>'\t', "\\"=>'\\\\','"' =>'\"', "'" =>"\\'");
        return s# [[:cntrl:]\\"] # $c{$&} // sprintf('\\x%02X', ord $&) #gex
            || /^$/ || /\h/ ? "\"$_\"" : $_;   # if empty or has space/escape
    }

    sub initialize {
        my ($id, $listenfile) = (@_);
        $opt{$id} = { pwd => rootdir() };
        warn "(client $id connected, path '$opt{$id}{pwd}')\n";
        main::output('OK', "Rong v$VERSION " . # server greeting
                     "-- Use ^D to exit, or 'help' for info.");
    }

    sub terminate {
        my ($id) = (@_);
        warn "(client $id disconnected, path '$opt{$id}{pwd}')\n";
        delete $opt{$id};
    }

    # Result should always end in one line starting with 'OK' or 'ERR'.
    sub invoke {
        my ($id, $line) = @_;
        warn "(client $id sent, path '$opt{$id}{pwd}'): $line\n"; # received input
        eval {
            my ($cmd, @arg) = deserialize($line);
            die "Unrecognized command.\n" unless $rong::{"cmd_$cmd"};
            $rong::{"cmd_$cmd"}($id, @arg);
        };
        if ($@) {
            chomp($@);
            my ($cmd) = $line =~ m#^(\w+)#;
            main::output('ERR', "Command '$cmd': $@");
        }
        return not $@;
    }
}

sub server_main {
    my ($listenfh, $listenfile) = @_;
    local $SIG{__DIE__} = 'DEFAULT';
    local $SIG{PIPE} = local $SIG{HUP} = 'IGNORE';
    local $SIG{TERM} = local $SIG{INT} = sub { die "(server exited)\n" };
    warn "(server started)\n";

    my $sockets = IO::Select->new($listenfh);
    while (my @ready = $sockets->can_read) {
        foreach my $fh (@ready) {
            if ($fh == $listenfh) {            # new client connected
                if (my $fh = make_accept($listenfh)) {
                    my $id = fileno($fh);
                    $sockets->add($fh);
                    select $fh;
                    rong::initialize($id, $listenfile);
                }
                next;
            }
            my $id = fileno($fh);
            my $line = input($fh) // do {      # client disconnected
                warn "(client $id) ERROR! $@\n" if $@;
                rong::terminate($id);
                $sockets->remove($fh);
                close $fh;
                next;
            };
            # Client sent a command.
            select $fh;
            rong::invoke($id, $line);
        }
    }
    die "THIS CANNOT HAPPEN\n";                # above loop never exits
}

# Send $cmdstring to server $fh, setting $reply to the response gotten from
# server. Returns true if server returned an 'OK' response, false otherwise (in
# which case $reply is set to `undef` and $@ is set to an error message).
#
# In 'raw' mode both 'OK' and 'ERR' messages are passed through as-is
# (returning true). And `undef` is only returned (and `$@` set) if there's an
# error with the socket during communication.
sub send_command(\$$$;%) {
    my ($reply, $fh, $cmdstr, %opt) = @_;
    my $sockets = IO::Select->new($fh);
    if ($sockets->can_write) {                 # send command to server
        syswrite $fh, encode "$cmdstr\n";
    }
    if ($sockets->can_read) {                  # read server response
        $$reply = eval {
            local $_ = input($fh, raw => $opt{raw})
                // die($@ // "Server exited\n");
            return $_ if $opt{raw};
            my ($multiline, $status) =
                s#\A([.]{0,2})(ERR|OK)(?:[ \n]|$)##m ? ($1, $2) : ('', '');
            die "$_\n" if $status eq 'ERR';
            die "Unrecognized server response: '$_'\n" if $status ne 'OK';

            # Preserve missing final linefeed for '..' and empty outputs.
            return $_ if $multiline eq '..' or $_ eq '';
            return "$_\n";
        };
    }
    return not $@;
}

###############################################################################
# Main

local $SIG{__DIE__} = sub {
    die @_ if $^S;                             # abort if called inside eval
    my $more = (my $msg = "@_") =~ s/[.]$//;   # ending in '.' = extra help
    die("$PROGRAM: $msg",
        $more && "Try '$PROGRAM help' for more information.\n");
};

my $tempdir = create_tempdir();
my $socket  = File::Spec->join($tempdir, "default");
my $logfile = File::Spec->join($tempdir, "default.log");
my %opt = (help => 0, version => 0);

my @arg;
while (@ARGV) {
    local $_ = decode shift(@ARGV);
    /^--$/ and do { push(@arg, @ARGV); last };
    /^(-h|--help)$/ and do { $opt{help} = 1; next };
    /^(-V|--version)$/ and version();
    /^-./ and die "Unrecognized option '$_'.\n";
    push(@arg, $_);
}

if (!$opt{help} and ($arg[0] // '') eq 'help') {
    shift(@arg);
    $opt{help} = 1;
}

# Connect to server.
my $server = start_server($socket, $logfile)
    or die("Cannot connect to socket '$socket': $IO::Socket::errstr\n");
my $sockets = IO::Select->new($server);

# Verify server greeting.
my $greeting;
if ($sockets->can_read) {
    $greeting = input($server)
        // die "Cannot read server greeting: " . ($@ // "Server exited\n");
    die "Unrecognized server greeting\n",
        "    expected: 'OK Rong v{VERSION} -- {MESSAGE}'\n",
        "    but got : '$greeting'\n"
        unless $greeting =~ /^OK Rong v\d+\.\d+\.\d+\b/;
}

help($server, @arg ? $arg[0] : ())
    if $opt{help};

send_command(my $result, $server, rong::serialize(
    'cd', rong::workdir() // rong::rootdir(),
)) or warn "Cannot change dir: $@";

# Get subcommand from command line.
my $cmd = do {
    send_command(my $cmds, $server, rong::serialize(qw/help -/))
        or die "Cannot read available commands from Rong server\n";
    my %cmds = map { $_ => 1 } (rong::deserialize($cmds), 'repl');
    local $_ = $arg[0];
    @arg == 0                  ? 'list'      : # no args
        $cmds{$_}              ? shift(@arg) : # is a command
        /[^a-z]/               ? 'load'      : # has a non-alpha char
        -l $_                  ? 'load'      : # is (possibly dangling) symlink
        -f $_                  ? 'load'      : # is existing file
                                 shift(@arg);
};

# Repeat command for each arg (but send one command if no args).
if ($cmd ne 'repl') {
    my $err;
    my $more;
    for my $arg (@arg ? @arg : undef) {
        my $cmdstr = rong::serialize($cmd, $arg // ());
        if (send_command(my $result, $server, $cmdstr)) {
            print $result;
        } else {
            chomp(my $msg = $@);
            $err  = 1;
            $more = 1 if $msg =~ s/[.]$//;     # ending in '.' = extra help
            warn "$PROGRAM: $msg\n";
        }
    }
    warn "Try '$PROGRAM help' for more information.\n" if $more;
    exit($err ? 127 : 0);
}

# Client: Wait until there's input from either STDIN or $server.
die "Too many arguments.\n" if @arg;
say $greeting;
binmode(STDIN, ':raw');
$sockets->add(\*STDIN);
while (my @ready = $sockets->can_read) {
    foreach my $fh (@ready) {
        my $input = input($fh, server => $server) // do {
            die $@ if $@;
            die "Server exited\n" if $fh eq $server;
            exit;                              # ^D from STDIN = exit
        };
        if ($fh eq $server) {                  # from server: write to STDOUT
            say $input;
        } else {                               # from STDIN: send to server
            send_command(local $_, $server, $input, raw => 1);
            chomp($_ = $@ || $_);
            # Trailing in error message period = extra help.
            s/^(ERR[ \n].*)[.]\z/$1 (try 'help' for info)/m;
            say $_;
        }
    }
}

#[eof]
