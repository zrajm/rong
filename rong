#!/usr/bin/env perl
# Copyright (C) 2023-2024 zrajm <rong@zrajm.org>
# License: GPLv2 [https://gnu.org/licenses/gpl-2.0.txt]

# NOTE ON UTF8: The `use open` only deals with SOME input streams. Encoding and
# decoding has to be done manually for: Client's STDIN in REPL mode + all
# sockets + command line args + paths gotten from the file system + environment
# variables (%ENV) + Perl constants (e.g. `__FILE__`). STDIN, STDERR

# https://perl.com/pub/2012/04/perlunicook-standard-preamble.html
use utf8;      # so literals and identifiers can be in UTF-8
use v5.12;     # or later to get "unicode_strings" feature
use strict;    # quote strings, declare variables
use warnings;  # on by default
use warnings  qw(FATAL utf8);    # fatalize encoding glitches
use open      qw(:std :utf8);    # undeclared streams in UTF-8
use charnames qw(:full :short);  # unneeded in v5.16

use IO::Socket;
use IO::Select;
use POSIX;
use File::Spec;
use Encode ();

our $AUTHOR='zrajm <rong@zrajm.org>';
our $VERSION='0.0.50';                         # https://semver.org/
our $VERSION_DATE='28 January 2024';
our $CREATED_DATE='28 December 2023'; # never change this!
our $USAGE = <<'USAGE_END';
Usage: rong [OPTION]... [COMMAND [ARG]...|FILE...]
A daemonic headless text editor.

Options:
  -h, --help      Display this help and exit
  -V, --version   Output version information and exit

Commands:
  cat FILE...     Output FILE(s) on standard output
  cd DIR          Change directory used for relative filenames
  help            Display list of commands
  kill FILE...    Unload FILE(s)
  [list]          List loaded files (default if no FILE given)
  [load] FILE...  Load FILE(s) (default if FILE(s) are given)
  repl            Interactively talk to Rong server directly
  save FILE...    Save FILE(s)

If neither COMMAND nor FILE(s) are given, `list` is assumed. If FILE(s) are
specified but COMMAND is not, then `load` is assumed.
USAGE_END
our $PROGRAM = (File::Spec->splitpath(decode(__FILE__)))[2];

###############################################################################
# Functions

sub help { print $USAGE; exit 0; }
sub version {
    my ($years)    = $CREATED_DATE =~ m#(\d{4})#;
    my ($end_year) = $VERSION_DATE =~ m#(\d{4})#;
    $years .= "-$end_year" unless $years eq $end_year;
    print(
        "$PROGRAM (zrajm utils) $VERSION ($VERSION_DATE)\n",
        "Copyright (C) $years $AUTHOR\n",
        "License: GNU GPLv2 <https://gnu.org/licenses/gpl-2.0.txt>.\n",
        "This is free software: You are free to change and redistribute it.\n");
    exit 0;
}

# Usage: create_tempdir()
#
# Creates a run directory for the Rong server and clients. The directory is
# called '<TEMPDIR>/<PROGRAMNAME>-<USERID>' (usually '/tmp/rong-1000' but all
# parts can change depending on your $TEMPDIR variable, the name of the script
# and your user's numerical user id). The directory name is the same as Tmux.
sub create_tempdir {
    my $dir = File::Spec->join(rong::tempdir(), "$PROGRAM-$<");
    mkdir($dir, 0700) or die "Cannot create tempdir '$dir': $!\n"
        unless -d $dir;
    return $dir;
}

{
    state $opt = Encode::FB_CROAK | Encode::LEAVE_SRC;
    sub encode { eval { Encode::encode('UTF-8', shift // $_, $opt) } }
    sub decode { eval { Encode::decode('UTF-8', shift // $_, $opt) } }
}

# Return input string or, or error or end-of-file, undef. Also set `$@` to
# error message (in case of error), or `undef`. If both return value and `$@`
# is `undef`, then an end-of-input was reached.
#
# Second arg is the file handle of the server connection, if any. If `$fh` and
# `$server` refer to the same file then any error message will refer to
# 'server', otherwise (if `$server` is `undef` or `$server != $fh`) error
# message will refer to 'client'.
sub input {
    my ($fh, $server) = @_;
    my $src = $fh ne ($server // '') ? 'client' : 'server';
    return eval {
        my $size = sysread($fh, my $raw, 1024 * 1024);
        die("Cannot read from $src: $!\n") if not defined $size;
        return () if $size == 0;
        decode($raw) or die("Cannot decode string from $src: $@");
    };
}
# Used for writing to socket.
sub output { syswrite select(), encode join('', @_) }

sub make_socket {
    my %opt = @_;
    if (my $file = $opt{Local} and -e $opt{Local}) { # remove old file (if any)
        die "Cannot delete non-socket file '$file'\n" unless -S $file;
        unlink $file or die "Cannot delete previous socket '$file': $!\n";
    }
    my $fh = IO::Socket::UNIX->new(%opt, Type => SOCK_STREAM)
        or return ();
    $fh->autoflush(1);
    return $fh;
}

sub make_accept {
    my ($fh) = @_;
    my $newfh = $fh->accept();
    $newfh->autoflush(1);
    return $newfh;
}

sub start_server {
    my ($socket_path, $logfile) = @_;

    # If server is already running, return connection to that.
    if (my $fh = make_socket(Peer => $socket_path)) { return $fh }

    # Create server's listening socket to which new clients connect (it's
    # inherited by child processes). Done BEFORE forking avoid race condition
    # where child tries to connect and listening socket isn't yet there.
    my $listenfh = make_socket(Local => $socket_path, Listen => 1)
        or die("Cannot create socket '$socket_path': $IO::Socket::errstr\n");

    # Start intermediate process (session leader in new session).
    defined(my $inter_pid = fork) or die "Cannot fork intermediate: $!\n";
    if ($inter_pid == 0) {                     # in intermediate
        (POSIX::setsid != -1) or die "Cannot start new session: $!";
        # Start server process.
        defined(my $server_pid = fork) or die "Cannot fork server: $!\n";
        if ($server_pid == 0) {                # in server
            $0 .= ' --daemon';                 #   server process name
            my $root = rong::rootdir();
            umask(0) or die "Cannot change umask to '0': $!\n";
            chdir($root) or die "Cannot change dir to '$root': $!\n";
            close STDOUT;
            open(STDERR, '>>', $logfile)
                or die "Cannot open logfile '$logfile': $!\n";
            close STDIN;
            server_main($listenfh, $socket_path);# never returns
            exit 0;
        }
        exit 0;
    }

    # Client process (original process).
    close $listenfh;                           # close listening socket
    wait;                                      # reap intermediate process
    return make_socket(Peer => $socket_path);  # connect to new server
}

{
    package rong;

    use sigtrap qw/handler exithandler normal-signals/;
    use Cwd ();

    sub exithandler {
        warn "(server exited)\n" unless -t STDERR;
    }

    # Wrappers to decode names from the file system.
    sub rootdir  { main::decode File::Spec->rootdir() }
    sub tempdir  { main::decode File::Spec->tmpdir() }
    sub workdir  { main::decode Cwd::getcwd() }
    sub realpath { main::decode Cwd::realpath(@_) }

    ###########################################################################
    ## Internal functions, called inside eval, use die() to indicate error

    sub load_file {
        my ($file) = @_;
        die "Cannot load a directory\n" if -d $file;
        die "Cannot load a block device\n" if -b _;
        die "Cannot load a character device\n" if -c _;
        die "Cannot load a named pipe\n" if -p _;
        die "Cannot load a socket\n" if -S _;
        open(my $fh, '<', $file) or die "Cannot open file: $!\n";
        my @buf;
        until (eof $fh) {
            my $x = <$fh> // die "Cannot read file: $!\n";
            push(@buf, $x);
        }
        close($fh) or die "Cannot close file: $!\n";
        return \@buf;
    }

    sub save_file {
        my ($file, $data) = @_;
        open(my $fh, '>', $file) or die "Cannot open file: $!\n";
        print($fh @$data) or die "Cannot write file: $!\n";
        close($fh) or die "Cannot close file: $!\n";
    }

    # Using `decode()` isn't needed for `abspath()` and `relpath()`,
    # since if both args are in utf8, then the result is, too.
    sub abspath {
        my ($path, $base) = @_;
        $path =~ s#^~[^/]*# glob("'$&'") #e;
        $path = File::Spec->join($base, $path)
            unless File::Spec->file_name_is_absolute($path);
        $path = realpath($path) or die "Cannot find absolute path: $!\n";
        return $path;
    }

    sub relpath {
        my ($path, $base) = @_;
        return $base eq rootdir()
            ? $path : File::Spec->abs2rel($path, $base);
    }

    # Here say() & print() goes to client; warn() goes to log; die() exits with
    # error message.
    my %buf;
    my %opt; # $opt{$id}{$property} where '$id' is a client connection id.

    sub cmd_cat {
        my ($id, $file) = @_;
        die "No file specified.\n" unless $file;
        $file = abspath($file, $opt{$id}{pwd});
        die "No such file loaded\n" if not exists $buf{$file};
        main::output @{$buf{$file}};
    }

    sub cmd_cd {
        my ($id, $dir) = @_;
        if (defined $dir) {
            my $newdir = abspath($dir, $opt{$id}{pwd});
            die "Directory does not exist\n" unless -e $newdir;
            die "File is not a directory\n" unless -d $newdir;
            $opt{$id}{pwd} = $newdir;
        }
        main::output "$opt{$id}{pwd}\n";
    }

    sub cmd_help {
        my ($id, @arg) = @_;
        die "Too many arguments.\n" if @arg;
        main::output join(' ', sort(subcommands())) . "\n";
    }

    sub cmd_kill {
        my ($id, $file) = @_;
        die "No file specified.\n" unless $file;
        $file = abspath($file, $opt{$id}{pwd});
        die "No such file loaded\n" if not exists $buf{$file};
        delete $buf{$file};
    }

    sub cmd_list {
        my ($id, @arg) = @_;
        die "Too many arguments.\n" if @arg;
        main::output map {
            escape(relpath($_, $opt{$id}{pwd})) . "\n";
        } sort keys(%buf);
    }

    sub cmd_load {
        my ($id, $file) = @_;
        die "No file specified.\n" unless $file;
        $file = abspath($file, $opt{$id}{pwd});
        die "File already loaded\n" if exists $buf{$file};
        $buf{$file} = load_file($file);
    }

    sub cmd_save {
        my ($id, $file) = @_;
        die "No file specified.\n" unless $file;
        $file = abspath($file, $opt{$id}{pwd});
        die "No such file loaded\n" if not exists $buf{$file};
        save_file($file, $buf{$file});
    }

    # Note: escape() & serialize() are used externally (and must therefore not
    # die()), while unescape() and deserialize() are not (and may die()).
    sub deserialize {
        local ($_) = @_;
        my @x = m/\G( "(?:[^"\\]|\\.)*" |      # double quoted
                      '(?:[^'\\]|\\.)*' |      # single quoted
                      [^[:cntrl:][:space:]"']+ # other words
                  )(?:\h+|$)/gxc;
        die "Cannot deserialize string\n" if pos != length;
        return map { unescape($_) } @x;
    }
    sub unescape {
        local ($_) = @_;
        /^(["'])(.*)\1$/ and $_ = $2;
        s#\\([abefnrt\\\"']|x[0-9A-F]{2})# eval "\"$&\"" #ge;
        return $_;
    }

    ###########################################################################
    ## Called externally, must not die()

    sub serialize { join ' ', map { escape($_) } @_ }
    sub escape {
        local ($_) = @_;
        my %c = ("\a"=>'\a', "\b"=>'\b', "\e"=>'\e',  "\f"=>'\f', "\n"=>'\n',
                 "\r"=>'\r', "\t"=>'\t', "\\"=>'\\\\','"' =>'\"', "'" =>"\\'");
        return s# [[:cntrl:]\\"] # $c{$&} // sprintf('\\x%02X', ord $&) #gex
            || /^$/ || / / ? "\"$_\"" : $_;    # if empty or has space/escape
    }

    sub initialize {
        my ($id, $listenfile) = (@_);
        $opt{$id} = { pwd => rootdir() };
        warn "(client $id connected, path '$opt{$id}{pwd}')\n";
        main::output "OK $PROGRAM $VERSION $listenfile\n";
    }

    sub terminate {
        my ($id) = (@_);
        warn "(client $id disconnected, path '$opt{$id}{pwd}')\n";
        delete $opt{$id};
    }

    sub subcommands { map { /^cmd_(.*)/ ? $1 : () } keys(%rong::) }

    # Result should always end in one line starting with 'OK' or 'ERR'.
    sub invoke {
        my ($id, $line) = @_;
        warn "(client $id sent, path '$opt{$id}{pwd}'): $line\n"; # received input
        eval {
            my ($cmd, @arg) = deserialize($line);
            die "Unrecognized command\n" unless $rong::{"cmd_$cmd"};
            $rong::{"cmd_$cmd"}($id, @arg);
        };
        main::output $@
            ? "ERR Command '@{[ (split /\s+/, $line, 2)[0] ]}': $@"
            : "OK\n";
        return not $@;
    }
}

sub server_main {
    my ($listenfh, $listenfile) = @_;
    warn "(server started)\n";
    my $sockets = IO::Select->new($listenfh);
    while (my @ready = $sockets->can_read) {
        foreach my $fh (@ready) {
            if ($fh == $listenfh) {            # new client connected
                if (my $fh = make_accept($listenfh)) {
                    my $id = fileno($fh);
                    $sockets->add($fh);
                    select $fh;
                    rong::initialize($id, $listenfile);
                }
                next;
            }
            my $id = fileno($fh);
            my $line = input($fh) // do {      # client disconnected
                warn "(client $id) ERROR! $@\n" if $@;
                rong::terminate($id);
                $sockets->remove($fh);
                close $fh;
                next;
            };
            chomp $line;                       # client sent a command
            select $fh;
            rong::invoke($id, $line);
        }
    }
    die "THIS CANNOT HAPPEN\n";                # above loop never exits
}

# Send $cmdstring to server $fh, setting $reply to the response gotten from
# server. Returns true if server returned an 'OK' response, false otherwise (in
# which case $reply is set to `undef` and $@ is set to an error message).
sub send_command(\$$$) {
    my ($reply, $fh, $cmdstr) = @_;
    my $sockets = IO::Select->new($fh);
    if ($sockets->can_write) {                 # send command to server
        syswrite $fh, encode $cmdstr;
    }
    if ($sockets->can_read) {                  # read server response
        $$reply = eval {
            my $reply = input($fh) // die($@ // "Server exited\n");
            chomp $reply;
            $reply =~ s/^(ERR|OK)\b\s*(.*)\z//m;
            my ($status, $msg) = ($1 // '', $2);
            die "$msg\n" if $status eq 'ERR';
            die "Unknown server response: $reply\n" unless $status eq 'OK';
            $reply;
        };
    }
    return not $@;
}

###############################################################################
# Main

local $SIG{__DIE__} = sub {
    die @_ if $^S;                             # abort if called inside eval
    my $more = (my $msg = "@_") =~ s/[.]$//;   # ending in '.' = extra help
    die("$PROGRAM: $msg",
        $more && "Try '$PROGRAM --help' for more information.\n");
};

my $tempdir = create_tempdir();
my $socket  = File::Spec->join($tempdir, "default");
my $logfile = File::Spec->join($tempdir, "default.log");

my @arg;
while (@ARGV) {
    local $_ = decode shift(@ARGV);
    /^--$/ and do { push(@arg, @ARGV); last };
    /^(-h|--help)$/ and help();
    /^(-V|--version)$/ and version();
    /^-./ and die "Unrecognized option '$_'.\n";
    push(@arg, $_);
}

# Connect to server.
my $server = start_server($socket, $logfile)
    or die("Cannot connect to socket '$socket': $IO::Socket::errstr\n");
my $sockets = IO::Select->new($server);

# Verify server greeting.
my $greeting;
if ($sockets->can_read) {
    $greeting = input($server)
        // die "Cannot read server greeting: " . ($@ // "Server exited\n");
    die "Cannot understand server greeting\n",
        "    expected: OK rong #.#.# $socket\n",
        "    but got : $greeting"
        unless $greeting =~ /^OK rong \d+\.\d+\.\d+ \Q$socket\E$/;
}

send_command(my $result, $server, rong::serialize(
    'cd', rong::workdir() // rong::rootdir(),
)) or warn "Cannot change dir: $@";

# Get subcommand from command line.
my $cmd = do {
    my %cmds = map { $_ => 1 } (rong::subcommands(), 'repl');
    @arg == 0           ? 'list' :             # no args
        !$cmds{$arg[0]} ? 'load'               # only filenames given
                        : shift(@arg);         # 1st arg is subcommand
};

# Repeat command for each arg (but send one command if no args).
if ($cmd ne 'repl') {
    my $err;
    my $more;
    for my $arg (@arg ? @arg : undef) {
        my $cmdstr = rong::serialize($cmd, $arg // ());
        if (send_command(my $result, $server, $cmdstr)) {
            print $result;
        } else {
            chomp(my $msg = $@);
            $err  = 1;
            $more = 1 if $msg =~ s/[.]$//;     # ending in '.' = extra help
            warn "$PROGRAM: $msg\n";
        }
    }
    warn "Try '$PROGRAM --help' for more information.\n" if $more;
    exit($err ? 127 : 0);
}

# Client: Wait until there's input from either STDIN or $server.
die "Too many arguments.\n" if @arg;
print $greeting;
binmode(STDIN, ':raw');
$sockets->add(\*STDIN);
while (my @ready = $sockets->can_read) {
    foreach my $fh (@ready) {
        my $input = input($fh, $server) // do {
            die $@ if $@;
            die "Server exited\n" if $fh eq $server;
            exit;                              # ^D from STDIN = exit
        };
        chomp $input;
        if ($fh eq $server) {                  # from server: write to STDOUT
            say $input;
        } else {                               # from STDIN: send to server
            if (send_command(my $result, $server, $input)) {
                print $result;
                say "OK";
            } else {
                (my $msg = "$@") =~ s/[.]$//;  # strip trailing '.'
                print "ERR $msg";
            }
        }
    }
}

#[eof]
